{"trial_id": "1", "hyperparameters": {"space": [{"class_name": "Int", "config": {"name": "no of layers", "default": null, "conditions": [], "min_value": 1, "max_value": 10, "step": 1, "sampling": "linear"}}, {"class_name": "Int", "config": {"name": "no of filters_0", "default": null, "conditions": [], "min_value": 32, "max_value": 512, "step": 32, "sampling": "linear"}}, {"class_name": "Choice", "config": {"name": "activation function_0", "default": "relu", "conditions": [], "values": ["relu", "selu", "tanh", "sigmoid", "selu"], "ordered": false}}, {"class_name": "Choice", "config": {"name": "Dropout_0", "default": 0.1, "conditions": [], "values": [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9], "ordered": true}}, {"class_name": "Int", "config": {"name": "no of nodes_0", "default": null, "conditions": [], "min_value": 32, "max_value": 512, "step": 32, "sampling": "linear"}}, {"class_name": "Choice", "config": {"name": "best optimizer", "default": "adam", "conditions": [], "values": ["adam", "rmsprop", "adadelta", "sgd", "momentum"], "ordered": false}}, {"class_name": "Int", "config": {"name": "no of filters_1", "default": null, "conditions": [], "min_value": 32, "max_value": 512, "step": 32, "sampling": "linear"}}, {"class_name": "Choice", "config": {"name": "activation function_1", "default": "relu", "conditions": [], "values": ["relu", "selu", "tanh", "sigmoid", "selu"], "ordered": false}}, {"class_name": "Choice", "config": {"name": "Dropout_1", "default": 0.1, "conditions": [], "values": [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9], "ordered": true}}, {"class_name": "Int", "config": {"name": "no of filters_2", "default": null, "conditions": [], "min_value": 32, "max_value": 512, "step": 32, "sampling": "linear"}}, {"class_name": "Choice", "config": {"name": "activation function_2", "default": "relu", "conditions": [], "values": ["relu", "selu", "tanh", "sigmoid", "selu"], "ordered": false}}, {"class_name": "Choice", "config": {"name": "Dropout_2", "default": 0.1, "conditions": [], "values": [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9], "ordered": true}}, {"class_name": "Int", "config": {"name": "no of nodes_1", "default": null, "conditions": [], "min_value": 32, "max_value": 512, "step": 32, "sampling": "linear"}}, {"class_name": "Int", "config": {"name": "no of nodes_2", "default": null, "conditions": [], "min_value": 32, "max_value": 512, "step": 32, "sampling": "linear"}}, {"class_name": "Int", "config": {"name": "no of filters_3", "default": null, "conditions": [], "min_value": 32, "max_value": 512, "step": 32, "sampling": "linear"}}, {"class_name": "Choice", "config": {"name": "activation function_3", "default": "relu", "conditions": [], "values": ["relu", "selu", "tanh", "sigmoid", "selu"], "ordered": false}}, {"class_name": "Choice", "config": {"name": "Dropout_3", "default": 0.1, "conditions": [], "values": [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9], "ordered": true}}, {"class_name": "Int", "config": {"name": "no of filters_4", "default": null, "conditions": [], "min_value": 32, "max_value": 512, "step": 32, "sampling": "linear"}}, {"class_name": "Choice", "config": {"name": "activation function_4", "default": "relu", "conditions": [], "values": ["relu", "selu", "tanh", "sigmoid", "selu"], "ordered": false}}], "values": {"no of layers": 7, "no of filters_0": 352, "activation function_0": "selu", "Dropout_0": 0.8, "no of nodes_0": 416, "best optimizer": "sgd", "no of filters_1": 160, "activation function_1": "selu", "Dropout_1": 0.6, "no of filters_2": 320, "activation function_2": "relu", "Dropout_2": 0.1, "no of nodes_1": 64, "no of nodes_2": 192, "no of filters_3": 32, "activation function_3": "relu", "Dropout_3": 0.1, "no of filters_4": 32, "activation function_4": "relu"}}, "metrics": {"metrics": {}}, "score": null, "best_step": 0, "status": "FAILED", "message": "Traceback (most recent call last):\n  File \"n:\\deep learning project\\CNN\\emotion-detection-cnn\\env\\lib\\site-packages\\keras_tuner\\src\\engine\\base_tuner.py\", line 274, in _try_run_and_update_trial\n    self._run_and_update_trial(trial, *fit_args, **fit_kwargs)\n  File \"n:\\deep learning project\\CNN\\emotion-detection-cnn\\env\\lib\\site-packages\\keras_tuner\\src\\engine\\base_tuner.py\", line 239, in _run_and_update_trial\n    results = self.run_trial(trial, *fit_args, **fit_kwargs)\n  File \"n:\\deep learning project\\CNN\\emotion-detection-cnn\\env\\lib\\site-packages\\keras_tuner\\src\\engine\\tuner.py\", line 314, in run_trial\n    obj_value = self._build_and_fit_model(trial, *args, **copied_kwargs)\n  File \"n:\\deep learning project\\CNN\\emotion-detection-cnn\\env\\lib\\site-packages\\keras_tuner\\src\\engine\\tuner.py\", line 232, in _build_and_fit_model\n    model = self._try_build(hp)\n  File \"n:\\deep learning project\\CNN\\emotion-detection-cnn\\env\\lib\\site-packages\\keras_tuner\\src\\engine\\tuner.py\", line 164, in _try_build\n    model = self._build_hypermodel(hp)\n  File \"n:\\deep learning project\\CNN\\emotion-detection-cnn\\env\\lib\\site-packages\\keras_tuner\\src\\engine\\tuner.py\", line 155, in _build_hypermodel\n    model = self.hypermodel.build(hp)\n  File \"C:\\Users\\Asus\\AppData\\Local\\Temp\\ipykernel_16868\\3303031633.py\", line 18, in build_model\n    model.add(Conv2D(\n  File \"n:\\deep learning project\\CNN\\emotion-detection-cnn\\env\\lib\\site-packages\\keras\\src\\models\\sequential.py\", line 120, in add\n    self._maybe_rebuild()\n  File \"n:\\deep learning project\\CNN\\emotion-detection-cnn\\env\\lib\\site-packages\\keras\\src\\models\\sequential.py\", line 139, in _maybe_rebuild\n    self.build(input_shape)\n  File \"n:\\deep learning project\\CNN\\emotion-detection-cnn\\env\\lib\\site-packages\\keras\\src\\layers\\layer.py\", line 222, in build_wrapper\n    original_build_method(*args, **kwargs)\n  File \"n:\\deep learning project\\CNN\\emotion-detection-cnn\\env\\lib\\site-packages\\keras\\src\\models\\sequential.py\", line 180, in build\n    x = layer(x)\n  File \"n:\\deep learning project\\CNN\\emotion-detection-cnn\\env\\lib\\site-packages\\keras\\src\\utils\\traceback_utils.py\", line 122, in error_handler\n    raise e.with_traceback(filtered_tb) from None\n  File \"n:\\deep learning project\\CNN\\emotion-detection-cnn\\env\\lib\\site-packages\\keras\\src\\ops\\operation_utils.py\", line 221, in compute_conv_output_shape\n    raise ValueError(\nValueError: Computed output size would be negative. Received `inputs shape=(None, 1, 1, 32)`, `kernel shape=(3, 3, 32, 32)`, `dilation_rate=[1 1]`.\n"}